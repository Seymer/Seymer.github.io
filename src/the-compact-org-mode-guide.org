#+TITLE: The compact Org-mode Guide

** 介绍
*** 前言
Org is a mode for keeping notes, maintaining TODO lists, and doing project planning with
a fast and effective plain-text system. It is also an authoring and publishing system, and it
supports working with source code for literal programming and reproducible research.
This document is a much compressed derivative of the comprehensive Org-mode manual.
It contains all basic features and commands, along with important hints for customization.
It is intended for beginners who would shy back from a 200 page manual because of sheer
size.
*** 安装
Important: If you are using a version of Org that is part of the Emacs distribution, please
skip this section and go directly to Section 1.3 [Activation], page 1.
If you have downloaded Org from the Web, either as a distribution .zip or .tar file, or
as a Git archive, it is best to run it directly from the distribution directory. You need to
add the lisp subdirectories to the Emacs load path. To do this, add the following line to
.emacs:
#+BEGIN_SRC emacs-lisp
(setq load-path (cons "~/path/to/orgdir/lisp" load-path))
(setq load-path (cons "~/path/to/orgdir/contrib/lisp" load-path))
#+END_SRC
If you have been using git or a tar ball to get Org, you need to run the following command
to generate autoload information. command:
*make autoloads*
*** 激活
Add the following lines to your .emacs file. The last four lines define global keys for some
commands — please choose suitable keys yourself.
;; The following lines are always needed. Choose your own keys.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
Files with extension ‘.org’ will be put into Org mode automatically. 
*** 反馈
If you find problems with Org, or if you have questions, remarks, or ideas about it, please
mail to the Org mailing list *emacs-orgmode@gnu.org*. For information on how to submit
bug reports, see the main manual.

** 文档结构
Org is based on Outline mode and provides flexible commands to edit the structure of the
document.
*** 概述
Like HTML, Org provides links inside a file, external links to other files, Usenet articles,
emails, and much more.Org is implemented on top of Outline mode. Outlines allow a document to be organized
in a hierarchical structure, which (at least for me) is the best representation of notes and
thoughts. An overview of this structure is achieved by folding (hiding) large parts of the
document to show only the general document structure and the parts currently being worked
on. Org greatly simplifies the use of outlines by compressing the entire show/hide functionality
into a single command, *org-cycle*, which is bound to the *TAB* key.
*** 标题
Headlines define the structure of an outline tree. The headlines in Org start with one or
more stars, on the left margin1. For example:
#+BEGIN_EXAMPLE
    * Top level headline
    ** Second level
    *** 3rd level
        some text
    *** 3rd level
        more text
    * Another top level headline
#+END_EXAMPLE
Note that a headline named after org-footnote-section, which defaults to ‘Footnotes’,
is considered as special. A subtree with this headline will be silently ignored by exporting
functions.
Some people find the many stars too noisy and would prefer an outline that has whitespace
followed by a single star as headline starters. Section 15.2 [Clean view], page 34,
describes a setup to realize this.
*** 可视化循环
Outlines make it possible to hide parts of the text in the buffer. Org uses just two commands,
bound to TAB and S-TAB to change the visibility in the buffer.
TAB Subtree cycling: Rotate current subtree among the states
,-> FOLDED -> CHILDREN -> SUBTREE --.
'-----------------------------------'
When called with a prefix argument (C-u TAB) or with the shift key, global
cycling is invoked.
S-TAB and C-u TAB
Global cycling: Rotate the entire buffer among the states
,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
'--------------------------------------'
C-u C-u C-u TAB
Show all, including drawers.
When Emacs first visits an Org file, the global state is set to OVERVIEW, i.e. only the
top level headlines are visible. This can be configured through the variable org-startupfolded,
or on a per-file basis by adding a startup keyword overview, content, showall,
like this:
#+STARTUP: content
*** Motion
The following commands jump to other headlines in the buffer.
C-c C-n Next heading.
C-c C-p Previous heading.
C-c C-f Next heading same level.
C-c C-b Previous heading same level.
C-c C-u Backward to higher level heading.
*** 结构编辑
M-RET Insert new heading with same level as current. If the cursor is in a plain list
item, a new item is created (see Section 2.7 [Plain lists], page 4). When this
command is used in the middle of a line, the line is split and the rest of the line
becomes the new headline2.
M-S-RET Insert new TODO entry with same level as current heading.
TAB in new, empty entry
In a new entry with no text yet, TAB will cycle through reasonable levels.
M-left/right
Promote/demote current heading by one level.
M-S-left/right
Promote/demote the current subtree by one level.
M-S-up/down
Move subtree up/down (swap with previous/next subtree of same level).
C-c C-w Refile entry or region to a different location. See Section 9.2 [Refile and copy],
page 20.
C-x n s/w Narrow buffer to current subtree / widen it again
When there is an active region (Transient Mark mode), promotion and demotion work
on all headlines in the region.
*** 稀疏树
An important feature of Org mode is the ability to construct sparse trees for selected
information in an outline tree, so that the entire document is folded as much as possible,
but the selected information is made visible along with the headline structure above it3.
Just try it out and you will see immediately how it works.
Org mode contains several commands creating such trees, all these commands can be
accessed through a dispatcher:
C-c / This prompts for an extra key to select a sparse-tree creating command.
C-c / r Occur. Prompts for a regexp and shows a sparse tree with all matches. Each
match is also highlighted; the highlights disappear by pressing C-c C-c.
The other sparse tree commands select headings based on TODO keywords, tags, or
properties and will be discussed later in this manual.
*** 普通列表
Within an entry of the outline tree, hand-formatted lists can provide additional structure.
They also provide a way to create lists of checkboxes (see Section 5.6 [Checkboxes],
page 12). Org supports editing such lists, and the HTML exporter (see Chapter 12 [Exporting],
page 29) parses and formats them.
    Org knows ordered lists, unordered lists, and description lists.
    - Unordered list items start with ‘-’, ‘+’, or ‘*’ as bullets.
    - Ordered list items start with ‘1.’ or ‘1)’.
    - Description list use ‘ :: ’ to separate the term from the description.
Items belonging to the same list must have the same indentation on the first line. An
item ends before the next line that is indented like its bullet/number, or less. A list ends
when all items are closed, or before two blank lines. An example:
#+BEGIN_EXAMPLE
    ** Lord of the Rings
       My favorite scenes are (in this order)
       1. The attack of the Rohirrim
       2. Eowyn's fight with the witch king
          + this was already my favorite scene in the book
          + I really like Miranda Otto.
       Important actors in this film are:
       - Elijah Wood :: He plays Frodo
       - Sean Astin :: He plays Sam, Frodo's friend.
#+END_EXAMPLE
The following commands act on items when the cursor is in the first line of an item (the
line with the bullet or number).
TAB Items can be folded just like headline levels.
M-RET Insert new item at current level. With a prefix argument, force a new heading
(see Section 2.5 [Structure editing], page 3).
M-S-RET Insert a new item with a checkbox (see Section 5.6 [Checkboxes], page 12).
M-S-up/down
Move the item including subitems up/down (swap with previous/next item of
same indentation). If the list is ordered, renumbering is automatic.
M-left/M-right
Decrease/increase the indentation of an item, leaving children alone.
M-S-left/right
Decrease/increase the indentation of the item, including subitems.
C-c C-c If there is a checkbox (see Section 5.6 [Checkboxes], page 12) in the item line,
toggle the state of the checkbox. Also verify bullets and indentation consistency
in the whole list.
C-c - Cycle the entire list level through the different itemize/enumerate bullets (‘-’,
‘+’, ‘*’, ‘1.’, ‘1)’).
*** 脚注
A footnote is defined in a paragraph that is started by a footnote marker in square brackets
in column 0, no indentation allowed. The footnote reference is simply the marker in square
brackets, inside text. For example:
#+BEGIN_EXAMPLE
    The Org homepage[fn:1] now looks a lot better than it used to.
    ...
    [fn:1] The link is: http://orgmode.org
#+END_EXAMPLE
The following commands handle footnotes:
C-c C-x f The footnote action command. When the cursor is on a footnote reference,
jump to the definition. When it is at a definition, jump to the (first) reference.
Otherwise, create a new footnote. When this command is called with a prefix
argument, a menu of additional options including renumbering is offered.
C-c C-c Jump between definition and reference.
Further reading
Chapter 2 of the manual
Sacha Chua’s tutorial
** 表格
Org comes with a fast and intuitive table editor. Spreadsheet-like calculations are supported
in connection with the Emacs calc package (see the Emacs Calculator manual for more
information about the Emacs calculator).
Org makes it easy to format tables in plain ASCII. Any line with ‘|’ as the first nonwhitespace
character is considered part of a table. ‘|’ is also the column separator. A table
might look like this:
| Name  | Phone | Age |
|-------+-------+-----|
| Peter | 1234  | 17  |
| Anna  | 4321  | 25  |
A table is re-aligned automatically each time you press TAB or RET or C-c C-c inside the
table. TAB also moves to the next field (RET to the next row) and creates new table rows
at the end of the table or before horizontal lines. The indentation of the table is set by the
first line. Any line starting with ‘|-’ is considered as a horizontal separator line and will be
expanded on the next re-align to span the whole table width. So, to create the above table,
you would only type
|Name|Phone|Age|
|-
cessary.
S-TAB Re-align, move to previous field.
RET Re-align the table and move down to next row. Creates a new row if necessary.
*Column and row editing*
M-left
M-right Move the current column left/right.
M-S-left Kill the current column.
M-S-right
Insert a new column to the left of the cursor position.
M-up
M-down Move the current row up/down.
M-S-up Kill the current row or horizontal line.
M-S-down Insert a new row above the current row. With a prefix argument, the line is
created below the current one.
C-c - Insert a horizontal line below current row. With a prefix argument, the line is
created above the current line.
C-c RET Insert a horizontal line below current row, and move the cursor into the row
below that line.
C-c ^ Sort the table lines in the region. The position of point indicates the column
to be used for sorting, and the range of lines is the range between the nearest
horizontal separator lines, or the entire table.
Further reading
Chapter 3 of the manual
Bastien’s table tutorial
Bastien’s spreadsheet tutorial
Eric’s plotting tutorial
** 超链接
Like HTML, Org provides links inside a file, external links to other files, Usenet articles,
emails, and much more.
*** 链接格式
Org will recognize plain URL-like links and activate them as clickable links. The general
link format, however, looks like this:
[[link][description]] or alternatively [[link]]
Once a link in the buffer is complete (all brackets present), Org will change the display so
that ‘description’ is displayed instead of ‘[[link][description]]’ and ‘link’ is displayed
instead of ‘[[link]]’. To edit the invisible ‘link’ part, use C-c C-l with the cursor on the
link.
*** 内部链接
If the link does not look like a URL, it is considered to be internal in the current file. The
most important case is a link like ‘[[#my-custom-id]]’ which will link to the entry with
the CUSTOM_ID property ‘my-custom-id’.
Links such as ‘[[My Target]]’ or ‘[[My Target][Find my target]]’ lead to a text
search in the current file for the corresponding target which looks like ‘<<My Target>>’.
Internal links will be used to reference their destination, through links or numbers, when
possible.
*** 外部链接
Org supports links to files, websites, Usenet and email messages, BBDB database entries
and links to both IRC conversations and their logs. External links are URL-like locators.
They start with a short identifying string followed by a colon. There can be no space after
the colon. Here are some examples:
http://www.astro.uva.nl/~dominik on the web
file:/home/dominik/images/jupiter.jpg file, absolute path
/home/dominik/images/jupiter.jpg same as above
file:papers/last.pdf file, relative path
file:projects.org another Org file
docview:papers/last.pdf::NNN open file in doc-view mode at page NNN
id:B7423F4D-2E8A-471B-8810-C40F074717E9 Link to heading by ID
news:comp.emacs Usenet link
mailto:adent@galaxy.net Mail link
vm:folder VM folder link
vm:folder#id VM message link
wl:folder#id WANDERLUST message link
mhe:folder#id MH-E message link
rmail:folder#id RMAIL message link
gnus:group#id Gnus article link
bbdb:R.*Stallman BBDB link (with regexp)
irc:/irc.com/#emacs/bob IRC link
info:org:External%20links Info node link (with encoded space)
A link should be enclosed in double brackets and may contain a descriptive text to be
displayed instead of the URL (see Section 4.1 [Link format], page 8), for example:
#+BEGIN_EXAMPLE
    [[http://www.gnu.org/software/emacs/][GNU Emacs]]
#+END_EXAMPLE
If the description is a file name or URL that points to an image, HTML export (see
Section 12.4 [HTML export], page 29) will inline the image as a clickable button. If there
is no description at all and the link points to an image, that image will be inlined into the
exported HTML file.
*** 处理链接

Org provides methods to create a link in the correct syntax, to insert it into an Org file,
and to follow the link.
C-c l Store a link to the current location. This is a global command (you must create
the key binding yourself) which can be used in any buffer to create a link. The
link will be stored for later insertion into an Org buffer (see below).
C-c C-l Insert a link. This prompts for a link to be inserted into the buffer. You can
just type a link, or use history keys up and down to access stored links. You
will be prompted for the description part of the link. When called with a C-u
prefix argument, file name completion is used to link to a file.
C-c C-l (with cursor on existing link)
When the cursor is on an existing link, C-c C-l allows you to edit the link and
description parts of the link.
C-c C-o or mouse-1 or mouse-2
Open link at point.
C-c & Jump back to a recorded position. A position is recorded by the commands
following internal links, and by C-c %. Using this command several times in
direct succession moves through a ring of previously recorded positions.

*** 跳转链接
File links can contain additional information to make Emacs jump to a particular location
in the file when following a link. This can be a line number or a search option after a double
colon.
Here is the syntax of the different ways to attach a search to a file link, together with
an explanation:
[[file:~/code/main.c::255]] Find line 255
[[file:~/xx.org::My Target]] Find ‘<<My Target>>’
[[file:~/xx.org::#my-custom-id]] Find entry with custom id
Further reading
Chapter 4 of the manual





** TODO 项目
*** 使用 TODO 状态

Any headline becomes a TODO item when it starts with the word ‘TODO’, for example:
#+BEGIN_EXAMPLE
    *** TODO Write letter to Sam Fortune
#+END_EXAMPLE
The most important commands to work with TODO entries are:
C-c C-t Rotate the TODO state of the current item among
(unmarked) -> TODO -> DONE -> (unmarked)
The same rotation can also be done “remotely” from the agenda buffers with
the t command key (see Section 10.4 [Agenda commands], page 23).
S-right/left
Select the following/preceding TODO state, similar to cycling.
C-c / t View TODO items in a sparse tree (see Section 2.6 [Sparse trees], page 4). Folds
the buffer, but shows all TODO items and the headings hierarchy above them.
C-c a t Show the global TODO list. Collects the TODO items from all agenda files (see
Chapter 10 [Agenda Views], page 21) into a single buffer. See Section 10.3.2
[Global TODO list], page 22, for more information.
S-M-RET Insert a new TODO entry below the current one.
Changing a TODO state can also trigger tag changes. See the docstring of the option
org-todo-state-tags-triggers for details.
*** 多状态工作流
You can use TODO keywords to indicate sequential working progress states:
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
'((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
#+END_SRC
The vertical bar separates the TODO keywords (states that need action) from the DONE
states (which need no further action). If you don’t provide the separator bar, the last state
is used as the DONE state. With this setup, the command C-c C-t will cycle an entry
from TODO to FEEDBACK, then to VERIFY, and finally to DONE and DELEGATED.
Sometimes you may want to use different sets of TODO keywords in parallel. For example,
you may want to have the basic TODO/DONE, but also a workflow for bug fixing. Your setup
would then look like this:
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
'((sequence "TODO(t)" "|" "DONE(d)")
(sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")))
#+END_SRC
The keywords should all be different, this helps Org mode to keep track of which subsequence
should be used for a given entry. The example also shows how to define keys for
fast access of a particular state, by adding a letter in parenthesis after each keyword—you
will be prompted for the key after C-c C-t.
To define TODO keywords that are valid only in a single file, use the following text
anywhere in the file.
#+TODO: TODO(t) | DONE(d)
#+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
#+TODO: | CANCELED(c)
After changing one of these lines, use C-c C-c with the cursor still in the line to make
the changes known to Org mode.
*** 进度记录
Org mode can automatically record a timestamp and possibly a note when you mark a
TODO item as DONE, or even each time you change the state of a TODO item. This
system is highly configurable; settings can be on a per-keyword basis and can be localized
to a file or even a subtree. For information on how to clock working time for a task, see
Section 8.4 [Clocking work time], page 18.
 
*Closing items*
The most basic logging is to keep track of when a certain TODO item was finished. This is
achieved with1.
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC
Then each time you turn an entry from a TODO (not-done) state into any of the DONE
states, a line ‘CLOSED: [timestamp]’ will be inserted just after the headline. If you want
to record a note along with the timestamp, use2
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'note)
#+END_SRC
You will then be prompted for a note, and that note will be stored below the entry with a
‘Closing Note’ heading.
*Tracking TODO state changes*
You might want to keep track of TODO state changes. You can either record just a timestamp,
or a time-stamped note for a change. These records will be inserted after the headline
as an itemized list. When taking a lot of notes, you might want to get the notes out of the
way into a drawer. Customize the variable org-log-into-drawer to get this behavior.
For state logging, Org mode expects configuration on a per-keyword basis. This is
achieved by adding special markers ‘!’ (for a timestamp) and ‘@’ (for a note) in parentheses
after each keyword. For example:
#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)
will define TODO keywords and fast access keys, and also request that a time is recorded
when the entry is set to DONE, and that a note is recorded when switching to WAIT or
CANCELED. The same syntax works also when setting org-todo-keywords.

** 标签

** 属性
** 日期和时间
为了协助项目计划，TODO项目可以标注日期和时间。带有日期和时间信息的特殊格式的字符串在 Org 模式中被称为时间戳。
*** 时间戳

*** 创建时间戳
Org 模式需要使用特定格式用于识别字符戳。下面列出的所有命令以正确的格式生成时间戳。
<2018-01-20 Sat>
[2018-01-20 Sat]


** 捕获-重新提交-存档
** 议程观点
** 富文本导出
** 导出
** 发布
** 使用源代码
** 杂项
[[https://orgmode.org/orgcard.pdf][Org-Mode Reference Card]]
