#+TITLE: Spring Boot 入门
#+AUTHOR: Siqing Mu
#+DATE: [2020-06-14 Sun 00:45]

*** Spring Boot
Spring Boot 是一个可以让你轻松创建独立的、生产级的、基于 Spring 的 Web 应用程序。

*** 单模块项目创建
创建一个单模块项目，我们可以使用 https://start.spring.io 网站生成，然后用IDEA打开。

[[file:./images/spring-initializr.png]]

我们也可以直接用IDEA创建。

[[file:./images/idea-new-project-001.png]]
左侧菜单栏选择 Spring Initializr，然后 Next。

[[file:./images/idea-new-project-002.png]]
这里我们需要填写项目的Metadata信息[fn:1]
#+BEGIN_EXAMPLE
GroupID    项目组织的唯一标识符，遵循Java包名规则，以反向域名开始。
ArtifactID 项目的唯一标识符，即项目名称。小写字母，不要有特殊字符。
Version    项目版本号，开发阶段使用版本号后接 -SNAPSHOT 方便开发，发布部署后去掉。
Name       项目名称，和 ArtifactID 保持一致。
Package    项目包名，一般为GroupID + ArtifactID。
#+END_EXAMPLE

[[file:./images/idea-new-project-003.png]]
这里我们可以选择项目依赖，比如Spring Web。它使用Spring MVC框架，Tomcat作为默认嵌入式容器（服务器），并且包含RESTful。
[[file:./images/idea-new-project-004.png]]
[[file:./images/idea-new-project-005.png]]
至此，我们就创建好单模块项目了。测试一下吧。
添加Greeting.java
#+BEGIN_EXAMPLE
package com.example.demo.controller;

public class Greeting {

    private final long id;
    private final String content;

    public Greeting(long id, String content) {
        this.id = id;
        this.content = content;
    }

    public long getId() {
        return id;
    }

    public String getContent() {
        return content;
    }
}
#+END_EXAMPLE
GreetingController.java
#+BEGIN_EXAMPLE
package com.example.demo.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.concurrent.atomic.AtomicLong;

@RestController
public class GreetingController {

    private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();

    @GetMapping("/greeting")
    public Greeting greeting(@RequestParam(value = "name", defaultValue = "world") String name) {
        return new Greeting(counter.incrementAndGet(), String.format(template, name));
    }
}
#+END_EXAMPLE
最后的目录结构如图
[[file:./images/idea-new-project-006.png]]
试试在浏览器访问http://127.0.0.1:8080/greeting


*** 多模块项目创建
一般情况下，大中型项目都会划分模块，一方面是为了遵循面向对象设计原则，同时也是因为模块化设计可以提高项目结构清晰度，方便扩展，重用等。那如何划分模块呢，一般根据项目类型决定，没有一定之规。但还是有一些规律可循，比如经典的MVC架构模式，即Model（模型）、View（视图）、Controller（控制器）。对应Spring Web 应用，我一般使用这样的设计及命名：
#+BEGIN_EXAMPLE
web web层一般位于应用程序的最上层，也就是入口层，用于处理用户输入及响应。其实就是MVC中的Controller。
service service层位于web层之下，充当事务边界。一般作为公共API。
domain  域模型[fn:2]通常是用于数据库的持久化，在 Java 中，它们通常符合 javabean 规范，即它们具有 get 和 set 方法来表示单个属性和一个无参数的构造函数。是领域驱动设计里的一个重要概念。
dao DAO全称数据访问对象，可以理解为对数据库 CRUD 的操作接口。
#+END_EXAMPLE

[[file:./images/multiple-module-001.png]]
这次什么也不用选，因为我们是在创建外层结构。外层pom.xml属于管理和统筹项目信息及依赖，这里不需要Spring Web。或者说放到web模块的pom里更合适些。
[[file:./images/multiple-module-002.png]]
删掉 .mvn 目录、 mvnw 及 mvnw.cmd 文件，保留.gitignore，demo.iml，pom.xml。.idea是IDEA编辑器的一些配置信息，也保留。src目录，暂时先不要删，我们待会需要将DemoApplication启动文件放到创建好的web模块的包下。之后就可以删了。
[[file:./images/multiple-module-003.png]]
依次创建web模块，service模块，domain模块，dao模块。为了方便区分，我们在创建时加上前缀如demo-web、demo-service、demo-domain、demo-dao。
[[file:./images/multiple-module-004.png]]
如果你现在启动，会发现如下图console所示，那是因为我们还没有添加 Spring Web 依赖。我们在demo-web下的pom.xml添加
#+BEGIN_EXAMPLE
<dependencies>
   <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
   </dependency>
</dependencies>
#+END_EXAMPLE
再次运行，可以发现tomcat为我们启动了8080端口。如下图。
[[file:./images/multiple-module-005.png]]
同样，我们也添加下Greeting,GreetingController文件测试下。
[[file:./images/multiple-module-006.png]]

[[file:./images/multiple-module-007.png]]



*** reference
+ [[https://blog.csdn.net/zhangxingyu126/article/details/81013315][maven中的GroupID和ArtifactID怎么写]]
+

 
[fn:1][[https://maven.apache.org/guides/mini/guide-naming-conventions.html][Guide to naming conventions on groupId, artifactId, and version]]
[fn:2][[https://stackoverflow.com/questions/4913673/what-is-java-domain-model][what is java domain model]]
[fn:3][[https://en.wikipedia.org/wiki/Domain-driven_design][Domain-driven design]]
