#+TITLE: 算法通关40讲
#+DATE: [2019-09-22 Sun 08:52]

*** 算法/数据结构/系统设计
[[file:./images/algorithm-data-structure-system-design.png]]

*** 时间复杂度/空间复杂度
#+BEGIN_EXAMPLE
Big O notation

O(1): Constant Complexity（常数复杂度）
O(log n): Logarithmic Complexity（对数复杂度）
O(n): Linear Complexity（线性时间复杂度）
O(n^2): N square Complexity（平方）
O(n^3): N square Complexity（立方）
O(2^n): Exponential Growth（指数）
O(n!): Factorial（阶乘）
#+END_EXAMPLE

[[file:./images/application-to-common-algorithms.png]]

[[../resource/bigoposter.pdf][Big O Poster]]

*** Array & Linked List
Array

[[file:./images/array-search.png]]

[[file:./images/array-insert-delete.png]]

#+BEGIN_EXAMPLE
复杂度分析

Access:  O(1)
Insert: 平均O(n)，如果插入到最后一个则是O(1)
Delete: 平均O(n)，如果删除最后一个则是O(1)
#+END_EXAMPLE

Linked List

[[file:./images/linked-list.png]]

[[file:./images/linked-list-add-node.png]]

[[file:.//images/linked-list-delete-node.png]]

Doubly Linked List

[[file:./images/doubly-linked-list.png]]

#+BEGIN_EXAMPLE
复杂度分析

space:   O(n)
prepend: O(1)
append:  O(1)
lookup:  O(n)
insert:  O(1)
delete:  O(1) 
#+END_EXAMPLE

*** Stack & queue
#+BEGIN_EXAMPLE
Stack - First In First Out (FIFO)
Queue - First In Last Out (FILO)
#+END_EXAMPLE

[[file:./images/stack.png]]

[[file:./images/queue.png]]

*** PriorityQueue
#+BEGIN_EXAMPLE
Stack - First In First Out (FIFO)
Queue - First In Last Out (FILO)
PoriorityQueue - 优先队列
#+END_EXAMPLE

实现机制

1. Heap (Binary, Binomial, Fibonacci)
3. Binary Search Tree

两种堆

1. 小顶堆
2. 大顶堆

*** HashTable & Set
#+BEGIN_EXAMPLE
1. Hash Function
2. Hash Collisions
#+END_EXAMPLE

[[file:./images/hash-function.png]]

[[file:./images/hash-collisions.png]]

[[file:./images/listvsmapvsset.png]]

*** Tree & Binary Tree & Binary Search Tree
[[file:./images/tree.png]]

[[file:./images/binaryTree.png]]

[[file:./images/graph.png]]

#+BEGIN_EXAMPLE
Linked List 就是特殊化的 Tree
Tree 就是特殊化的 Graph
#+END_EXAMPLE

[[file:./images/tree-language.png]]

[[file:../images/binary-search-tree.png]]

[[file:./images/binary-search-tree-img.png]]

#+BEGIN_EXAMPLE

#+END_EXAMPLE
TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if (root == null || root == p || root == q) return root;
    TreeNode left = lowestCommonAncestor(root.left, p, q);
	TreeNode right = lowestCommonAncestor(root.right, p, q);
	return left == null ? right : right == null ? left : root;
}
#+BEGIN_EXAMPLE
def lowestCommonAncestor(self, root, p, q):
    if p.val < root.val > q.val:
        return self.lowestCommonAncestor(root.left, p, q)
    if p.val > root.val < q.val:
        return self.lowestCommonAncestor(root.right, p, q)
    return root
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def lowestCommonAncestor(self, root, p, q):
    while root:
        if p.val < root.val > q.val:
            root = root.left
        elif p.val > root.val < q.val:
            root = root.right
        else:
            return root        
#+END_EXAMPLE

*** 二叉树遍历
#+BEGIN_EXAMPLE
前序（Pre-order）根-左-右
中序（In-order）左-根-右
后序（Post-order）左-右-根
#+END_EXAMPLE

#+BEGIN_EXAMPLE
def preorder(self, root):
    if root:
        self.traverse_path.append(root.val)
        self.preorder(root.left)
        self.preorder(root.right)
        
def inorder(self, root):
    if root:
        self.inorder(root.left)
        self.traverse_path.append(root.val)
        self.inorder(root.right)
        
def postorder(self, root):
    if root:
        self.postorder(root.left)
        self.postorder(root.right)
        self.traverse_path.append(root.val)
#+END_EXAMPLE

*** 递归 & 分治
Recursion
#+BEGIN_EXAMPLE
def recursion(level, param1, param2, ...):
    # recursion terminator
    if level > MAX_LEVEL:
        print_result
        return
    
    # process logic in current level
    pocess_data(level, data...)
    
    # drill down
    self.recursion(level + 1, p1, ...)
    
    # reverse the current level status if needed
    reverse_state(level)
#+END_EXAMPLE

Divde & Conquer
#+BEGIN_EXAMPLE
def divide_conquer(problem, param1, param2, ...):
    
    # recursion terminator
    if problem is None:
        print_result
        return
    
    # prepare data
    data = prepare_data(problem)
    subproblems = split_problem(problem, data)
    
    #conquer subproblems
    subresult1 = self.divide_conquer(subproblems[0], p1, ...)
    subresult2 = self.divide_conquer(subproblems[1], p1, ...)
    subresult3 = self.divide_conquer(subproblems[2], p1, ...)
    ...
    
    # process and generate the final result
    result = process_result(subresult1, subresult2, subresult3, ...)
#+END_EXAMPLE

*** 
*** Union & Find 

*** LRU Cache
[[file:./images/cpu-socket.png]]

三个要点：
1. Least Recently Used
2. Hash Table + Double LinkedList
3. O(1) get and O(1) set

常用两种：
1. LFU - least frequently used
[[file:./images/LFU-Cache.png]]
2. LRU - least recently used
[[file:./images/LRU-Cache.png]]

*** Bloom Filter

两个特点：
1. 空间效率和查询速度远超一般算法
2. 查询不存在肯定不存在
3. 查询存在但不一定存在，需要再次确认

+ 查询不存在肯定不存在情况
[[file:./images/bloom-filter-01.png]]

+ 查询存在但不一定存在情况
[[file:./images/bloom-filter-02.png]]

*** 总结

[fn:1]https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)
[fn:2]https://www.bigocheatsheet.com/
[fn:3][[../resource/bigoposter.pdf][Big O Poster]]
[fn:4]https://en.wikipedia.org/wiki/Heap_(data_structure)
[fn:5]https://www.sqlpassion.at/archive/2018/01/06/understanding-the-meltdown-exploit-in-my-own-simple-words/
[fn:6]https://en.wikipedia.org/wiki/Cache_replacement_policies
