#+TITLE: docker 和 k8s 基础教程
#+DATE: [2021-02-24 Wed 09:50]


本文来自以下教程链接的实践记录:
+ https://1byte.io/developer-guide-to-docker-and-kubernetes/

*** kubernetes 架构及安装
典型的 Kubernetes 集群包含一个 master 和很多 node。Master 是控制集群的中心，node 是提供 CPU、内存和存储资源的节点。Master 上运行着多个进程，包括面向用户的 API 服务、负责维护集群状态的 Controller Manager、负责调度任务的 Scheduler 等。每个 node 上运行着维护 node 状态并和 master 通信的 kubelet，以及实现集群网络服务的 kube-proxy。

**** 安装
需要安装Kubernetes 的命令行客户端 kubctl
一个可以在本地跑起来的 Kubernetes 环境 Minikube、
以及给 Minikube 使用的虚拟化引擎 hyperkit。
#+BEGIN_EXAMPLE
brew install kubectl
brew install minikube
brew install docker-machine-driver-hyperkit
#+END_EXAMPLE

**** 启动minikube
#+BEGIN_EXAMPLE
minikube start --vm-driver hyperkit
#+END_EXAMPLE

Minikube 启动时会自动配置 kubectl，把它指向 Minikube 提供的 Kubernetes API 服务。可以用下面的命令确认：
#+BEGIN_EXAMPLE
kubectl config current-context
#+END_EXAMPLE

作为一个开发和测试的环境，Minikube 会建立一个有一个 node 的集群，用下面的命令可以看到：
#+BEGIN_EXAMPLE
kubectl get nodes
#+END_EXAMPLE

*** 部署一个单实例服务
Kubernetes 中部署的最小单位是 pod，而不是 Docker 容器。实时上 Kubernetes 是不依赖于 Docker 的，完全可以使用其他的容器引擎在 Kubernetes 管理的集群中替代 Docker。在与 Docker 结合使用时，一个 pod 中可以包含一个或多个 Docker 容器。但除了有紧密耦合的情况下，通常一个 pod 中只有一个容器，这样方便不同的服务各自独立地扩展。

Minikube 自带了 Docker 引擎，所以我们需要重新配置客户端，让 docker 命令行与 Minikube 中的 Docker 进程通讯：
#+BEGIN_EXAMPLE
eval $(minikube docker-env)
#+END_EXAMPLE
在运行上面的命令后，再运行 docker image ls 时只能看到一些 Minikube 自带的镜像。

**** 构建镜像
我们先构建一个镜像
#+BEGIN_EXAMPLE
mkdir demo
cd demo
mkdir html
echo '<h1>Hello Docker!</h1>' > html/index.html
#+END_EXAMPLE

接下来在当前目录创建一个Dockerfile文件，内容为
#+BEGIN_EXAMPLE
FROM nginx
COPY html/* /usr/share/nginx/html
#+END_EXAMPLE

用如下命令构建
#+BEGIN_EXAMPLE
docker build -t k8s-demo:v0.1 .
#+END_EXAMPLE

**** 创建pod.yml文件
#+BEGIN_EXAMPLE
apiVersion: v1
kind: Pod
metadata:
  name: k8s-demo
  labels:
    app: k8s-demo
spec:
  containers:
    - name: k8s-demo
      image: k8s-demo:v0.1
      ports:
        - containerPort: 80
#+END_EXAMPLE
这里定义了一个叫 k8s-demo 的 Pod，使用我们刚才构建的 k8s-demo:0.1 镜像。这个文件也告诉 Kubernetes 容器内的进程会监听 80 端口。然后把它跑起来：
#+BEGIN_EXAMPLE
kubectl create -f ./pod.yml
#+END_EXAMPLE

kubectl 把这个文件提交给 Kubernetes API 服务，然后 Kubernetes Master 会按照要求把 Pod 分配到 node 上。用下面的命令可以看到这个新建的 Pod：
#+BEGIN_EXAMPLE
kubectl get pods
#+END_EXAMPLE

虽然这个 pod 在运行，但是我们是无法像之前测试 Docker 时一样用浏览器访问它运行的服务的。可以理解为 pod 都运行在一个内网，我们无法从外部直接访问。要把服务暴露出来，我们需要创建一个 Service。Service 的作用有点像建立了一个反向代理和负载均衡器，负责把请求分发给后面的 pod。

创建一个 Service 的定义文件 svc.yml：
#+BEGIN_EXAMPLE
apiVersion: v1
kind: Service
metadata:
  name: k8s-demo-svc
  labels:
    app: k8s-demo
spec:
  type: NodePort
  ports:
    - port: 80
      nodePort: 30050
  selector:
    app: k8s-demo
#+END_EXAMPLE

这个 service 会把容器的 80 端口从 node 的 30050 端口暴露出来。注意文件最后两行的 selector 部分，这里决定了请求会被发送给集群里的哪些 pod。这里的定义是所有包含「app: k8s-demo」这个标签的 pod。可以通过如下命令查看
#+BEGIN_EXAMPLE
kubectl describe pods | grep Labels
#+END_EXAMPLE

如果pod.yml文件有修改，可以使用如下命令更新应用。
#+BEGIN_EXAMPLE
kubectl apply -f ./pod.yml
#+END_EXAMPLE

接下来我们创建这个service
#+BEGIN_EXAMPLE
kubectl create -f ./svc.yml
#+END_EXAMPLE

使用如下的命令就可以得到暴露出的URL，然后就可以在浏览器看到我们之前创建的网页了
#+BEGIN_EXAMPLE
minikube service k8s-demo-svc --url
#+END_EXAMPLE

**** 横向扩展、滚动更新、版本回滚
在这一节，我们来实验一下在一个高可用服务的生产环境会常用到的一些操作。在继续之前，先把刚才部署的 pod 删除（但是保留 service，下面还会用到）：
#+BEGIN_EXAMPLE
kubectl delete pod k8s-demo
#+END_EXAMPLE

在正式环境中我们需要让一个服务不受单个节点故障的影响，并且还要根据负载变化动态调整节点数量，所以不可能像上面一样逐个管理 pod。Kubernetes 的用户通常是用 Deployment 来管理服务的。一个 deployment 可以创建指定数量的 pod 部署到各个 node 上，并可完成更新、回滚等操作。

首先我们创建一个定义文件 deployment.yml：
#+BEGIN_EXAMPLE
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-demo-deployment
spec:
  replicas: 10
  selector:
    matchLabels:
      app: k8s-demo
  template:
    metadata:
      labels:
        app: k8s-demo
    spec:
      containers:
        - name: k8s-demo-pod
          image: k8s-demo:v0.1
          ports:
            - containerPort: 80
#+END_EXAMPLE

用如下命令创建
#+BEGIN_EXAMPLE
kubectl create -f ./deployment.yml
#+END_EXAMPLE

用下面的命令可以看到这个 deployment 的副本集（replica set），有 10 个 pod 在运行。
#+BEGIN_EXAMPLE
kubectl get rs
#+END_EXAMPLE

假设我们对项目做了一些改动，要发布一个新版本。这里作为示例，我们只把 HTML 文件的内容改一下, 然后构建一个新版镜像 k8s-demo:v0.2：
#+BEGIN_EXAMPLE
echo '<h1>Hello Kubernetes!</h1>' > html/index.html
docker build -t k8s-demo:v0.2 .
#+END_EXAMPLE

然后更新 deployment.yml：
#+BEGIN_EXAMPLE
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-demo-deployment
spec:
  replicas: 10
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: k8s-demo
  template:
    metadata:
      labels:
        app: k8s-demo
    spec:
      containers:
        - name: k8s-demo-pod
          image: k8s-demo:v0.2
          ports:
            - containerPort: 80
#+END_EXAMPLE
这里有两个改动，第一个是更新了镜像版本号 image: k8s-demo:v0.2，第二是增加了 minReadySeconds: 10 和 strategy 部分。新增的部分定义了更新策略：minReadySeconds: 10 指在更新了一个 pod 后，需要在它进入正常状态后 10 秒再更新下一个 pod；maxUnavailable: 1 指同时处于不可用状态的 pod 不能超过一个；maxSurge: 1 指多余的 pod 不能超过一个。这样 Kubernetes 就会逐个替换 service 后面的 pod。运行下面的命令开始更新：
#+BEGIN_EXAMPLE
kubectl apply -f ./deployment.yml --record=true
#+END_EXAMPLE
这里的 --record=true 让 Kubernetes 把这行命令记到发布历史中备查。这时可以马上运行下面的命令查看各个 pod 的状态：
#+BEGIN_EXAMPLE
kubectl get pods
#+END_EXAMPLE

从 AGE 列就能看到有一部分 pod 是刚刚新建的，有的 pod 则还是老的。下面的命令可以显示发布的实时状态：
#+BEGIN_EXAMPLE
kubectl rollout status deployment k8s-demo-deployment
#+END_EXAMPLE

下面的命令可以查看发布历史，因为第二次发布使用了 --record=true 所以可以看到用于发布的命令。
#+BEGIN_EXAMPLE
kubectl rollout history deployment k8s-demo-deployment
#+END_EXAMPLE

这时如果刷新浏览器，就可以看到更新的内容「Hello Kubernetes!」。假设新版发布后，我们发现有严重的 bug，需要马上回滚到上个版本，可以用这个很简单的操作：
#+BEGIN_EXAMPLE
kubectl rollout undo deployment k8s-demo-deployment --to-revision=1
#+END_EXAMPLE

Kubernetes 会按照既定的策略替换各个 pod，与发布新版本类似，只是这次是用老版本替换新版本：
#+BEGIN_EXAMPLE
kubectl rollout status deployment k8s-demo-deployment
#+END_EXAMPLE
在回滚结束之后，刷新浏览器就可以确认网页内容又改回了「Hello Docker!」。
